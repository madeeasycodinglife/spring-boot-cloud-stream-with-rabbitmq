spring:
  application:
    name: SPRING-CLOUD-STREAM
  cloud:
    function:
      definition: logEventReceived;sensorEventProducer
    stream:
      bindings:
        logEventReceived-in-0: #a consumer
          destination: sensor_event_topic
          group: ${spring.application.name}
        sensorEventProducer-out-0: #a producer
          destination: sensor_event_topic

# https://www.vincenzoracca.com/en/blog/framework/spring/cloud-stream/

# spring.cloud.function.definition: logEventReceived;sensorEventProducer: This property defines the application functions that will be used by the Spring Cloud
# Stream framework. In this case, there are two functions: logEventReceived and sensorEventProducer.

# stream.bindings: This section defines the bindings for the functions, specifying the input and output destinations for messaging.

# logEventReceived-in-0: This declares an input binding for the logEventReceived function. It specifies that messages will be consumed from the 
# sensor_event_topic destination.

# sensorEventProducer-out-0: This declares an output binding for the sensorEventProducer function. It specifies that messages produced by this 
# function will be sent to the sensor_event_topic destination.

# The spring.cloud.stream.bindings property is used to declare the destinations for each producer and consumer. Input bindings follow the 
# naming convention <functionName>-in-<index>, and output bindings follow <functionName>-out-<index>.

# In summary, the configuration sets up a Spring Cloud Stream application with two functions: a consumer (logEventReceived) and a 
# producer (sensorEventProducer). The logEventReceived function consumes messages from the sensor_event_topic (like Kafka topic), while the 
# sensorEventProducer function produces messages to the same topic. The configuration establishes the bindings between the functions and 
# the messaging destinations, allowing messages to flow between them.

# In the provided YAML configuration, logEventReceived-in-0 and sensorEventProducer-out-0 are used as the binding names for the consumer and producer functions, 
# respectively. These names are used to establish the communication channels between the functions and the messaging destinations.

# If you want to use different numbers, such as logEventReceived-in-1 and sensorEventProducer-out-1, you can modify the configuration as follows:

#spring:
#  application:
#    name: SPRING-CLOUD-STREAM
#  cloud:
#    function:
#      definition: logEventReceived;sensorEventProducer
#    stream:
#      bindings:
#        logEventReceived-in-1: # a consumer with a different index
#          destination: sensor_event_topic
#          group: ${spring.application.name}
#        sensorEventProducer-out-1: # a producer with a different index
#          destination: sensor_event_topic
# By using different numbers (indices) for the bindings, you can establish separate communication channels between different instances of
# consumers and producers. This allows you to have multiple consumers and producers for the same destination topic, each processing messages independently.

# Remember to update your code accordingly, ensuring that the names used in the configuration match the function bindings in your code.
# ======================================================================================================================
# More clearly :: 
# ======================================================================================================================

#spring:
#  application:
#   name: SPRING-CLOUD-STREAM
#  cloud:
#    function:
#      definition: logEventReceived0;logEventReceived1;sensorEventProducer0;sensorEventProducer1
#    stream:
#      bindings:
#        logEventReceived0-in-0: # consumer with index 0, topic name: sensor_event_topic0
#          destination: sensor_event_topic0
#          group: ${spring.application.name}
#        logEventReceived1-in-0: # consumer with index 1, topic name: sensor_event_topic1
#          destination: sensor_event_topic1
#          group: ${spring.application.name}
#        sensorEventProducer0-out-0: # producer with index 0, topic name: sensor_event_topic0
#          destination: sensor_event_topic0
#        sensorEventProducer1-out-0: # producer with index 1, topic name: sensor_event_topic1
#          destination: sensor_event_topic1
# @Configuration
# @Slf4j
# @RequiredArgsConstructor
# public class SensorEventFunctions {
#
#    // create a consumer with index 0, topic name: sensor_event_topic0
#    @Bean
#    public Consumer<SensorEventMessage> logEventReceived0() {
#        return sensorEventMessage -> log.info("Message received from binding 0: {}", sensorEventMessage);
#    }
#
#    // create a consumer with index 1, topic name: sensor_event_topic1
#    @Bean
#    public Consumer<SensorEventMessage> logEventReceived1() {
#        return sensorEventMessage -> log.info("Message received from binding 1: {}", sensorEventMessage);
#    }
#
#    // create a producer with index 0, topic name: sensor_event_topic0
#    @Bean
#    public Supplier<SensorEventMessage> sensorEventProducer0() {
#        return () -> new SensorEventMessage("2", Instant.now(), 30.0);
#    }
#
#   // create a producer with index 1, topic name: sensor_event_topic1
#    @Bean
#    public Supplier<SensorEventMessage> sensorEventProducer1() {
#        return () -> new SensorEventMessage("2", Instant.now(), 30.0);
#    }
# }
# Note :: The association between the producer functions and the topics is established through the naming convention in the YAML configuration.
# The names of the producer functions (sensorEventProducer0 and sensorEventProducer1) correspond to the binding names
# (sensorEventProducer0-out-0 and sensorEventProducer1-out-0) in the YAML 

#    The spring.cloud.function.definition property is used to define the application functions annotated with @Bean.
#    The functions are separated by a semicolon.
#    The spring.cloud.stream.bindings property is used to declare for each producer/consumer its destination
#    (in this case it is the name of a Topic Kafka). The following naming convention is used:
#    for input bindings: <functionName> + -in- + <index>.
#    for output bindings: <functionName> + -out- + <index>. The index field is always 0 when we want to exploit the concept
#    of message groups.
#    The consumer logEventReceived, in addition to having the destination field, also has the group field indicating the
#    name of the Message Group.
#    Each consumer in the same Message Group, reads messages from a different partition, so that it shares messages with the other consumers, in a horizontal scaling manner.
